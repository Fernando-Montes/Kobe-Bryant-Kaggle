a<-available.packages()
head(row.names(a),3)
head(rownames(a),3)
install.packages(c("slidify","ggplot2","devtools"))
library(ggplot2)
search()
find.package(devtools)
find.package("devtools")
install.packages("KernSmooth")
library(KernSmooth)
library(KernSmooth)
find.package("caret")
available.packages()
available.packages(c)
install.packages("caret")
library(caret)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list = FALSE)
spam
spam$type
training <- spam[inTrain]
testing <- spam[-inTrain]
dim(training)
inTrain <- createDataPartition(y=spam$type, p=0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
inTrain
swirl()
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.info("mytest.R")
file.info("mytest.R")$mode
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path()
file.path("mytest3.R")
?file.path
file.path("mytest3.R", folder1, folder2)
file.path(folder1, folder2)
file.path("folder1", "folder2")
ls()
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir" -p)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length = 30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2))
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
c(0.5, 55, -10, 6)
?c
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collape = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Fernando")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep= "-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?"matrix"
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(vector, m_matrix)
cbind(vector, my_matrix)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
all_data <- read.table("http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/all_data.RData")
load("/Users/fernandomontes/Downloads/all_data.RData")
load("http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/all_data.RData")
head(all_data)
source('~/Dropbox/Courses/Competition/Titanic/Titanic.R')
str(all_data)
load("~/Dropbox/Courses/Competition/Titanic/all_data.RData")
all_data
source('~/Dropbox/Courses/Competition/Titanic/Titanic.R')
source('~/Dropbox/Courses/Competition/Titanic/Titanic.R')
fancyRpartPlot(predicted_age)
median(all_data$age)
median(all_data$age, na.rm = TRUE)
median(all_data$Age, na.rm = TRUE)
median(all_data$Age)
.25*19 + .75*34
sum(is.na(all_data$Age))
source('~/Dropbox/Courses/Competition/Titanic/Titanic.R')
source('~/Dropbox/Courses/Competition/Titanic/Titanic.R')
head(train)
source('~/Dropbox/Courses/Competition/Titanic/Titanic.R')
source('~/Dropbox/Courses/Competition/Titanic/Titanic.R')
source('~/Dropbox/Courses/Competition/Titanic/Titanic.R')
head(my_prediction)
head(test)
test$PassengerId
my_prediction
my_solution <- data.frame(PassengerId = test$PassengerID, Survived = my_prediction)
summary(test$PassengerID)
test$PassengerID
summary(test$PassengerId)
str(test$PassengerId)
str(my_prediction)
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
source('~/Dropbox/Courses/Competition/Titanic/Titanic.R')
varImpPlot(my_forest)
?predict
# Course link
# https://campus.datacamp.com/courses/data-exploration-with-kaggle-scripts/
## Loading libraries
# Library for data manipulation
library(dplyr)
# Load data
acs_url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_810/AC_Survey_Subset.RData"
# Data to be loaded AC_Survey_Subset has the columns
# SCHL (School Level), PINCP (Income) and ESR (Work Status).
load(url(acs_url))
# Looking at data
head(AC_Survey_Subset, 20)
# Convert AC_Survey_Subset to tbl_df
AC_Survey_Subset <- tbl_df(AC_Survey_Subset)
# Remove na from the data
AC_Survey_Subset_Cleaned <- AC_Survey_Subset %>% na.omit()
# Filter data to include bachelors, masters and PhDs
AC_Survey_Subset_Cleaned <- AC_Survey_Subset_Cleaned %>% filter(SCHL == 21 | SCHL == 22 | SCHL == 24)
# Group by School level
AC_Survey_Subset_Cleaned <- AC_Survey_Subset_Cleaned %>% group_by(SCHL)
# Looking at data
head(AC_Survey_Subset_Cleaned, 20)
summarize(AC_Survey_Subset_Cleaned, mean(PINCP))
summarize(AC_Survey_Subset_Cleaned, n())
degree_holders <- summarize(AC_Survey_Subset_Cleaned, count = n())
degree_holders
str(AC_Survey_Subset_Cleaned)
sumaary(AC_Survey_Subset_Cleaned)
summary(AC_Survey_Subset_Cleaned)
degree_codes
library(ggplot2)
library(dplyr)
library(ggplot2)
data <- read.csv("data.csv", stringsAsFactors = FALSE)
setwd("~/Dropbox/Courses/Kaggle/KobeBryant")
data <- read.csv("data.csv", stringsAsFactors = FALSE)
train <- data[!is.na(data$shot_made_flag),]
test <- data[is.na(data$shot_made_flag),]
train$shot_made_flag <- as.factor(train$shot_made_flag)
train$shot_made_flag <- factor(train$shot_made_flag, levels = c("1", "0"))
#a plot to see accuracy by feature
pplot <- function(feat) {
feat <- substitute(feat)
ggplot(data = train, aes_q(x = feat)) +
geom_bar(aes(fill = shot_made_flag), stat = "count", position = "fill") +
scale_fill_brewer(palette = "Set1", direction = -1) +
ggtitle(paste("accuracy by", feat))
}
# a plot to see position of the shot by feature
courtplot <- function(feat) {
feat <- substitute(feat)
ggplot(data = train, aes(x = lon, y = lat)) +
geom_point(aes_q(color = feat), alpha = 0.7, size = 3) +
ylim(c(33.7, 34.0883)) +
scale_color_brewer(palette = "Set1") +
theme_void() +
ggtitle(paste(feat))
}
courtplot(combined_shot_type)
# a plot to see position of the shot by feature
courtplot <- function(feat) {
feat <- substitute(feat)
ggplot(data = train, aes(x = lon, y = lat)) +
geom_point(aes_q(color = feat), alpha = 0.7, size = 3) +
ggtitle(paste(feat)) +
ylim(c(33.7, 34.0883)) +
scale_color_brewer(palette = "Set1") +
theme_void()
}
courtplot(combined_shot_type)
courtplot <- function(feat) {
feat <- substitute(feat)
ggplot(data = train, aes(x = lon, y = lat)) +
geom_point(aes_q(color = feat), alpha = 0.7, size = 3) +
ggtitle(paste(feat))
#   +
#     ylim(c(33.7, 34.0883)) +
#     scale_color_brewer(palette = "Set1") +
#     theme_void()
}
courtplot(combined_shot_type)
courtplot <- function(feat) {
feat <- substitute(feat)
ggplot(data = train, aes(x = lon, y = lat)) +
geom_point(aes_q(color = feat), alpha = 0.7, size = 3) +
ggtitle(paste(feat)) +
ylim(c(33.7, 34.0883)) +
scale_color_brewer(palette = "Set1")
#  +
#     theme_void()
}
courtplot(combined_shot_type)
courtplot <- function(feat) {
feat <- substitute(feat)
ggplot(data = train, aes(x = lon, y = lat)) +
geom_point(aes_q(color = feat), alpha = 0.7, size = 3) +
ggtitle(paste(feat)) +
ylim(c(33.7, 34.0883)) +
scale_color_brewer(palette = "Set1") +
theme_void()
}
courtplot(combined_shot_type)
install.packages(c("boot", "car", "caret", "cluster", "curl", "devtools", "evaluate", "forecast", "formatR", "ggplot2", "git2r", "gtable", "htmltools", "kernlab", "kknn", "lava", "lme4", "lubridate", "Matrix", "mboost", "mgcv", "multcomp", "munsell", "mvtnorm", "nlme", "nnet", "openssl", "packrat", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rmarkdown", "rsconnect", "RWeka", "RWekajars", "scales", "survival", "swirl", "TeachingDemos", "testthat", "TTR", "withr", "xtable"))
install.packages(c("boot", "car", "caret", "cluster", "curl",
install.packages(c("boot", "car", "caret", "cluster", "curl", "devtools", "evaluate", "forecast", "formatR", "ggplot2", "git2r", "gtable", "htmltools", "kernlab", "kknn", "lava", "lme4", "lubridate", "Matrix", "mboost", "mgcv", "multcomp", "munsell", "mvtnorm", "nlme", "nnet", "openssl", "packrat", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rmarkdown", "rsconnect", "RWeka", "RWekajars", "scales", "survival", "swirl", "TeachingDemos", "testthat", "TTR", "withr", "xtable"))
install.packages(c("boot", "car", "caret", "cluster", "curl",
install.packages(c("boot", "car", "caret", "cluster", "curl"))
install.packages(c("devtools", "evaluate", "forecast", "formatR", "ggplot2", "git2r", "gtable", "htmltools", "kernlab", "kknn", "lava", "lme4", "lubridate", "Matrix", "mboost", "mgcv", "multcomp", "munsell", "mvtnorm", "nlme", "nnet", "openssl", "packrat", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rmarkdown", "rsconnect", "RWeka", "RWekajars", "scales", "survival", "swirl", "TeachingDemos", "testthat", "TTR", "withr", "xtable"))
install.packages(c("devtools", "evaluate", "forecast", "formatR", "ggplot2", "git2r", "gtable", "htmltools", "kernlab"))
install.packages(c("devtools", "evaluate", "forecast", "formatR",
install.packages(c("devtools", "evaluate", "forecast", "formatR"))
install.packages(c("ggplot2", "git2r", "gtable", "htmltools", "kernlab", "kknn"))
install.packages(c("ggplot2"))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages(c("git2r", "gtable", "htmltools", "kernlab", "kknn", "lava", "lme4", "lubridate", "Matrix", "mboost", "mgcv", "multcomp", "munsell", "mvtnorm", "nlme", "nnet", "openssl", "packrat", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rmarkdown", "rsconnect", "RWeka", "RWekajars", "scales", "survival", "swirl", "TeachingDemos", "testthat", "TTR", "withr", "xtable"))
install.packages(c("git2r", "gtable", "mvtnorm", "openssl", "quantreg", "RcppArmadillo", "rsconnect", "RWeka"))
install.packages(c("git2r", "gtable", "htmltools"))
install.packages(c("gtable", "htmltools"))
install.packages(htmltools")
install.packages("htmltools")
install.packages("gtable")
install.packages("gtable")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:ggplot2", unload=TRUE)
remove.packages("ggplot2")
install.packages("ggplot2")
remove.packages("git2r")
install.packages("git2r")
install.packages(c("gtable", "kernlab", "kknn"))
install.packages(c("gtable", "kernlab", "kknn"))
install.packages(c("lava", "lme4", "lubridate", "Matrix", "mboost", "mgcv", "multcomp", "munsell", "mvtnorm", "nlme", "nnet", "openssl", "packrat", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "rmarkdown", "rsconnect", "RWeka", "RWekajars", "scales", "survival", "swirl", "TeachingDemos", "testthat", "TTR", "withr", "xtable"))
install.packages(c("lava", "lme4", "lubridate", "Matrix", "mboost", "mgcv", "multcomp", "munsell"))
install.packages(c("lava", "lme4", "lubridate", "Matrix"))
install.packages(c("mboost", "mgcv", "multcomp", "munsell"))
install.packages(c("mboost", "mgcv", "multcomp", "munsell"))
install.packages(c("mboost", "mgcv""))
install.packages(c("mboost", "mgcv""))
install.packages(c("mboost", "mgcv"))
install.packages(c("multcomp", "munsell"))
install.packages(c("multcomp"))
install.packages(c("munsell"))
install.packages(c("munsell"))
install.packages(c("mvtnorm", "nlme"))
install.packages(c("nnet", "openssl"))
install.packages(c("packrat", "quantreg"))
install.packages(c("Rcpp", "RcppArmadillo"))
install.packages(c("Rcpp", "RcppArmadillo"))
install.packages(c("Rcpp"))
install.packages(c("Rcpp"))
install.packages(c("Rcpp"))
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:Rcpp", unload=TRUE)
remove.packages("Rcpp")
install.packages(c("Rcpp"))
install.packages(c("Rcpp"))
install.packages("RcppArmadillo")
install.packages(c("RcppEigen", "RCurl"))
install.packages(c("rmarkdown", "rsconnect"))
install.packages(c("RWeka", "RWekajars", "scales", "survival", "swirl", "TeachingDemos", "testthat", "TTR", "withr", "xtable"))
install.packages(c("RWeka", "RWekajars", "scales", "survival", "swirl"))
install.packages(c("RWeka", "RWekajars"))
install.packages(c("scales", "survival", "swirl"))
install.packages(c("scales"))
remove.packages("scales")
install.packages(c("scales"))
install.packages(c("scales"))
install.packages(c("survival", "swirl"))
install.packages(c("TeachingDemos", "testthat", "TTR", "withr", "xtable"))
library(dplyr)
library(ggplot2)
data <- read.csv("data.csv", stringsAsFactors = FALSE)
train <- data[!is.na(data$shot_made_flag),]
test <- data[is.na(data$shot_made_flag),]
train$shot_made_flag <- as.factor(train$shot_made_flag)
train$shot_made_flag <- factor(train$shot_made_flag, levels = c("1", "0"))
#a plot to see accuracy by feature
pplot <- function(feat) {
feat <- substitute(feat)
ggplot(data = train, aes_q(x = feat)) +
geom_bar(aes(fill = shot_made_flag), stat = "count", position = "fill") +
scale_fill_brewer(palette = "Set1", direction = -1) +
ggtitle(paste("accuracy by", feat))
}
# a plot to see position of the shot by feature
courtplot <- function(feat) {
feat <- substitute(feat)
ggplot(data = train, aes(x = lon, y = lat)) +
geom_point(aes_q(color = feat), alpha = 0.7, size = 3) +
ggtitle(paste(feat)) +
ylim(c(33.7, 34.0883)) +
scale_color_brewer(palette = "Set1") +
theme_void()
}
